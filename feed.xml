<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2013-06-23T12:17:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>TiCameraView でカメラをアプリに埋め込もう</title>
    <link rel="alternate" href="/blog/2013/06/23/ticameraview.html"/>
    <id>/blog/2013/06/23/ticameraview.html</id>
    <published>2013-06-23T12:17:00Z</published>
    <updated>2013-06-23T12:17:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Titanium Mobile にデフォルトで用意されている Ti.Media.showCamera とはひと味ちがう TiCameraView モジュールを作ってみました。
このモジュールのソースコードは GitHub にありますのでご自由にお使いください。
&lt;a href="https://github.com/k0sukey/TiCameraView"&gt;k0sukey/TiCameraView&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TiCameraView はカメラからの画像をリアルタイムに Ti.UI.ImageView へ流し込むモジュールです。
Ti.Media.showCamera では API をコールするとカメラ専用のピッカーが表示されてしまいますが、TiCameraView は通常のウィンドウへ（もちろんビューにも）直に貼り付けることができます。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/TiCameraView.png" alt="TiCameraView" /&gt;&lt;/p&gt;

&lt;h3 id="section"&gt;機能&lt;/h3&gt;
&lt;p&gt;Ti.Media.showCamera とほとんど同じことができます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;写真撮影&lt;/li&gt;
  &lt;li&gt;動画撮影&lt;/li&gt;
  &lt;li&gt;カメラの切り替え&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;将来的に追加したい機能は以下の通りです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;動画撮影時に音声も&lt;/li&gt;
  &lt;li&gt;オーバレイしている Ti.UI.Label や Ti.UI.ImageView の合成（現状 add することはできますが、撮影された写真や動画に合成することはできません）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="section-1"&gt;使い方&lt;/h3&gt;
&lt;p&gt;詳しくは GitHub のレポジトリにある &lt;a href="https://github.com/k0sukey/TiCameraView/blob/master/example/app.js"&gt;example/app.js&lt;/a&gt; をご覧ください。
できることはひと通り網羅してあります。&lt;/p&gt;

&lt;h4 id="cameraview-"&gt;CameraView の作り方&lt;/h4&gt;
&lt;p&gt;Titanium Mobile の UI パーツと同じように、モジュールを reauire したら &lt;code&gt;createView()&lt;/code&gt; すれば OK です。
簡単ですね。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var win = Ti.UI.createWindow();

var TiCamera = require('be.k0suke.ticamera');
var cameraView = TiCamera.createView({
	width: 240,
	height: 320,
	backgroundColor: '#000',
	videoQuality: TiCamera.QUALITY_MEDIUM,
	cameraPosition: TiCamera.hasFrontCamera() ? TiCamera.CAMERA_FRONT : TiCamera.CAMERA_BACK,
	frameDuration: 16
});
win.add(cameraView);

win.open();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;videoQuality&lt;/code&gt; や &lt;code&gt;cameraPosition&lt;/code&gt;、&lt;code&gt;frameDuration&lt;/code&gt; が TiCameraView 用の特別なプロパティになります。
&lt;code&gt;videoQuality&lt;/code&gt; は Ti.Media.showCamera のプロパティと同等のもの、&lt;code&gt;cameraPosition&lt;/code&gt; はフロント / バックカメラの初期値になります。
&lt;code&gt;frameDuration&lt;/code&gt; は fps ですね。
値を小さくするとカクカクに、大きくすると滑らかになりますが、16 〜 30 程度を目安に調整してください。&lt;/p&gt;

&lt;h4 id="section-2"&gt;写真の撮影&lt;/h4&gt;
&lt;p&gt;Ti.Media.showCamera と同じように、&lt;code&gt;success&lt;/code&gt; / &lt;code&gt;error&lt;/code&gt; コールバックを指定しながら撮影することができます。
一点、異なる点は &lt;code&gt;shutterSound&lt;/code&gt; ですね。
シャッター音のオン / オフを指定することができます。
オフにすると無音カメラにできてしまいますが、ご利用はご自身の責任でお願いします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cameraView.takePicture({
	saveToPhotoGallery: true,	// default false
	shutterSound: false,		// default true
	success: function(e){
		// e.media(TiBlob), like Ti.Media.showCamera
	},
	error: function(e){
	}
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;シャッター音をオフにしながら setInterval で連続撮影してみたりすると、QR コードを読み取るカメラができそうですね。
ただ、setInterval しながら &lt;code&gt;saveToPhotoGallery&lt;/code&gt; を true にすると、カメラロールが大惨事になることがありますのでご注意ください。
&lt;small class="muted"&gt;もしかしたら定期的に写真を取得できるイベントリスナを作るかもしれません。
そちらのほうが現実的ですよね。&lt;/small&gt;&lt;/p&gt;

&lt;h4 id="section-3"&gt;動画の撮影&lt;/h4&gt;
&lt;p&gt;こちらも Ti.Media.showCamera と同じように、&lt;code&gt;success&lt;/code&gt; / &lt;code&gt;error&lt;/code&gt; コールバックを指定しながら撮影することができます。
&lt;code&gt;recordingSound&lt;/code&gt; で撮影音のオン / オフができます。
こちらも無音カメラにできてしまいますので、ご利用はご自身の責任でお願いします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cameraView.startRecording({
	recordingSound: false		// default true
});

cameraView.stopRecording({
	saveToPhotoGallery: true,	// default false
	recordingSound: false,		// default true
	success: function(e){
		// e.media(TiBlob), like Ti.Media.showCamera
	},
	error: function(e){
	}
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;startRecording()&lt;/code&gt; メソッドで撮影を開始して、&lt;code&gt;stopRecording()&lt;/code&gt; で完了します。
もちろん &lt;code&gt;startRecording()&lt;/code&gt; の前に &lt;code&gt;stopRecording()&lt;/code&gt; はできません。
example/app.js では、撮影後に Ti.Media.videoPlayer で撮影した動画を再生していますので参考にしてみてください。&lt;/p&gt;

&lt;h3 id="section-4"&gt;プロパティとメソッド&lt;/h3&gt;

&lt;h3 id="section-5"&gt;プロパティ&lt;/h3&gt;

&lt;h4 id="videoquality"&gt;videoQuality&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;createView()&lt;/code&gt; する際に指定してください。
TiCamera.&lt;code&gt;QUALITY_PHOTO&lt;/code&gt; / &lt;code&gt;QUALITY_HIGH&lt;/code&gt; / &lt;code&gt;QUALITY_MEDIUM&lt;/code&gt; / &lt;code&gt;QUALITY_LOW&lt;/code&gt; / &lt;code&gt;QUALITY_640x480&lt;/code&gt; / &lt;code&gt;QUALITY_1280x720&lt;/code&gt; から選択してください。&lt;/p&gt;

&lt;h4 id="cameraposition"&gt;cameraPosition&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;createView()&lt;/code&gt; する際に指定してください。
TiCamera.&lt;code&gt;CAMERA_FRONT&lt;/code&gt; / &lt;code&gt;CAMERA_BACK&lt;/code&gt; のどちらかを選択してください。
フロント / バックのカメラが端末でサポートされているかは、TiCamera.&lt;code&gt;hasFrontCamera()&lt;/code&gt; / &lt;code&gt;hasBackCamera()&lt;/code&gt; メソッドで調べることができます。&lt;/p&gt;

&lt;h4 id="frameduration"&gt;frameDuration&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;createView()&lt;/code&gt; する際に指定してください。
16 〜 30 程度を目安に fps を指定します。&lt;/p&gt;

&lt;h3 id="section-6"&gt;メソッド&lt;/h3&gt;

&lt;h4 id="createview"&gt;createView&lt;/h4&gt;
&lt;p&gt;TiCameraView を作ります。&lt;/p&gt;

&lt;h4 id="hasfrontcamera--hasbackcamera"&gt;hasFrontCamera / hasBackCamera&lt;/h4&gt;
&lt;p&gt;フロント / バックのカメラが端末でサポートされているか調べることができます。&lt;/p&gt;

&lt;h4 id="togglecamera"&gt;toggleCamera&lt;/h4&gt;
&lt;p&gt;フロント / バックのカメラを交互に切り替えることができます。&lt;/p&gt;

&lt;h4 id="takepicture"&gt;takePicture&lt;/h4&gt;
&lt;p&gt;写真を撮影することができます。
このメソッドは &lt;code&gt;createView()&lt;/code&gt; で作った TiCameraView で利用してください。&lt;/p&gt;

&lt;h4 id="startrecording--stoprecording"&gt;startRecording / stopRecording&lt;/h4&gt;
&lt;p&gt;動画を撮影することができます。
cameraView.&lt;code&gt;startRecording()&lt;/code&gt; で撮影を開始し、cameraView.&lt;code&gt;stopRecording()&lt;/code&gt; で完了します。
このメソッドは &lt;code&gt;createView()&lt;/code&gt; で作った TiCameraView で利用してください。&lt;/p&gt;

&lt;h3 id="section-7"&gt;参考にさせていただいたサイト&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://dev.classmethod.jp/smartphone/ios-camera-intro/"&gt;iOSのカメラ機能を使う方法まとめ【13日目】 ｜ Developers.IO&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://blog.azzip-azzip.com/2013/04/avassetwriterinputpixelbufferadaptor_avfoundation/"&gt;AVFoundationでキャプチャした画像をAVAssetWriterInputPixelBufferAdaptorクラスを使って映像生成 ›  blog.azzip-azzip.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
  </entry>
</feed>
