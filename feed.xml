<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2013-09-02T08:22:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Titanium で DKLiveBlur を使おう</title>
    <link rel="alternate" href="/blog/2013/09/02/tidkliveblur.html"/>
    <id>/blog/2013/09/02/tidkliveblur.html</id>
    <published>2013-09-02T08:22:00Z</published>
    <updated>2013-09-02T08:22:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;みなさま、iOS7 対応いかがでしょうか？
ぼくはいま作っている趣味アプリを iOS7 風な見た目にするべくがんばっている最中です。&lt;/p&gt;

&lt;p&gt;さて、今回は &lt;a href="https://github.com/k0sukey/TiDKLiveBlur"&gt;TiDKLiveBlur&lt;/a&gt; のご紹介です。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/TiDKLiveBlur.png" alt="TiDKLiveView" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/kronik/DKLiveBlur"&gt;DKLiveBlur&lt;/a&gt; という、スクロールできるビューの背景画像へ、スクロールさせると動的に曇ったような、スリガラス効果を加えてくれるライブラリを Titanium でも利用できるようにしたモジュールです。
これで iOS7 風なビューを作ることができますね！&lt;/p&gt;

&lt;p&gt;それでは簡単な使い方をご説明します。
このモジュールはソースコード内で require する必要はありません。
tiapp.xml の &amp;lt;module&amp;gt; に記述するだけで Ti.UI.TableView と Ti.UI.ListView にスリガラス効果を提供します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;modules&amp;gt;
    &amp;lt;module platform="iphone"&amp;gt;be.k0suke.tidkliveblur&amp;lt;/module&amp;gt;
&amp;lt;/modules&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ti.UI.TableView を例にしてみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var tableView = Ti.UI.createTableView({
	backgroundBlurImage: '/background.png',
	glassColor: '#fff', // optional, default #fff
	data: [
		{ title: 'row0' },
		{ title: 'row1' },
		{ title: 'row2' },
		{ title: 'row3' },
		{ title: 'row4' },
		{ title: 'row5' },
		{ title: 'row6' },
		{ title: 'row7' },
		{ title: 'row8' },
		{ title: 'row9' }
	]
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ti.UI.TableView（Ti.UI.ListView）に backgroundBlurImage と glassColor というプロパティが指定できるようになります。
backgroundBlurImage にはスリガラス効果を加えたい背景画像を指定してください（backgroundImage と同じように、リモートの画像を指定することはできません）。
glassColor は色を指定できます。
デフォルトは白ですが、Titanium で指定できるカラーコードならなんでも指定することができますので、色々お試しください。&lt;/p&gt;

&lt;p&gt;一点注意が必要で、ある程度のデータ数がないとスクロールできる縦幅が発生しないので、データ数が少ない場合スリガラス効果が発生しないでスクロールが終了してしまう可能性があります。
Ti.UI.TableView であれば、setContentInsets メソッドで top のマージンをある程度確保してあげれば、良い感じに効果が発生するかと思います（現時点での最新版 SDK3.1.2.GA で Ti.UI.ListView の setContentInsets は残念ながら未実装です）。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tableView.setContentInsets({
	top: 400,
	right: 0,
	bottom: 0,
	left: 0
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というわけで、DKLiveBlur を Titanium で使えるようにするモジュールのご紹介でした。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Titanium で ISRefreshControl を使おう</title>
    <link rel="alternate" href="/blog/2013/08/22/tiisrefreshcontrol.html"/>
    <id>/blog/2013/08/22/tiisrefreshcontrol.html</id>
    <published>2013-08-22T07:30:00Z</published>
    <updated>2013-08-22T07:30:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Titanium で Pull-to-Refresh、イベント処理（scroll / dragend）やフラグ管理が面倒ですよね。
最近だと &lt;a href="https://twitter.com/FokkeZB"&gt;@FokkeZB&lt;/a&gt; さん作の &lt;a href="https://github.com/FokkeZB/nl.fokkezb.pullToRefresh"&gt;nl.fokkezb.pullToRefresh&lt;/a&gt; が Alloy の Widget として使えて、ずいぶん便利になってきています。&lt;/p&gt;

&lt;p&gt;ただ、やっぱり iOS6 から使える、UIRefreshControl が使いたいところです。
びよーんって伸びて無駄に引っ張りたくなっちゃいます。
Titanium でも使いたくて UIRefreshControl したくて&lt;a href="https://github.com/k0sukey/TiExtendView"&gt;モジュール&lt;/a&gt;を書いたりしましたが、iOS6 のみなのがネックでした。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/TiISRefreshControl.png" alt="TiISRefreshControl" /&gt;&lt;/p&gt;

&lt;p&gt;そこで &lt;a href="https://github.com/ishkawa/ISRefreshControl"&gt;ISRefreshControl&lt;/a&gt; の力を借りてしまおうということです。
これは iOS4 / iOS5 でも UIRefreshControl の様に振る舞ってくれる、素敵なライブラリです。
何としてでも Titanium で使いたいところです。&lt;/p&gt;

&lt;p&gt;と、言うわけで、&lt;a href="https://github.com/k0sukey/TiISRefreshControl"&gt;TiISRefreshControl&lt;/a&gt; を書きました。
それでは簡単な使い方をご説明します。
このモジュールはソースコード内で require する必要はありません。
tiapp.xml の &amp;lt;module&amp;gt; に記述するだけで Ti.UI.TableView と Ti.UI.ListView に Pull-to-Refresh を提供します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;modules&amp;gt;
    &amp;lt;module platform="iphone"&amp;gt;be.k0suke.tiisrefreshcontrol&amp;lt;/module&amp;gt;
&amp;lt;/modules&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ti.UI.TableView を例にしてみましょう。以下のコードだけで簡単に Pull-to-Refresh の挙動を実現することができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var tableView = Ti.UI.createTableView({
	data: [
		{ title: 'row0' },
		{ title: 'row1' },
		{ title: 'row2' },
		{ title: 'row3' },
		{ title: 'row4' },
		{ title: 'row5' },
		{ title: 'row6' },
		{ title: 'row7' },
		{ title: 'row8' },
		{ title: 'row9' }
	]
});

tableView.addEventListener('refreshstart', function(){
	setTimeout(function(){
		tableView.refreshFinish();
	}, 5000);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;では、実際にデータを取得してからの処理はどうでしょうか。
Alloy のデータバインディングとあわせてご覧ください。&lt;/p&gt;

&lt;h2 id="view"&gt;View&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Window&amp;gt;
	&amp;lt;ListView id="lists" defaultItemTemplate="list"&amp;gt;
		&amp;lt;Templates&amp;gt;
			&amp;lt;ItemTemplate name="list"&amp;gt;
				&amp;lt;Label bindId="name" class="name"/&amp;gt;
			&amp;lt;/ItemTemplate&amp;gt;
		&amp;lt;/Templates&amp;gt;

		&amp;lt;ListSection id="section" dataCollection="lists" dataTransform="doTransform"&amp;gt;
			&amp;lt;ListItem template="list" name:text="{name}"/&amp;gt;
		&amp;lt;/ListSection&amp;gt;
	&amp;lt;/ListView&amp;gt;
&amp;lt;/Window&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="controller"&gt;Controller&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;var lists = Alloy.Collections.lists;

function doTransform(model) {
	return model.toJSON();
}

$.lists.addEventListener('refreshstart', function(){
	lists.fetch({
		success: function(){
			$.lists.refreshFinish();
		},
		error: function(){
			$.lists.refreshFinish();
		}
	});
});

$.index.addEventListener('open', function(){
	$.lists.refreshBegin();
});

$.index.open();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ウィンドウである $.index を開くと同時に Ti.UI.ListView の refreshBegin メソッドを実行します。
このメソッドは、ListView を引っ張る挙動をコードから実行してくれます。
データの受信が完了したら refreshstart イベントが発火すると lists コレクションのフェッチが実行されます。
データの受信が成功失敗にかかわらずインジケータを消してあげないといけませんので、success / error 両方で refreshFinish メソッドを実行します。&lt;/p&gt;

&lt;p&gt;というわけで、簡単に UIRefreshControl を Titanium で使えるようにするモジュールのご紹介でした。
他にも細かなメソッドやイベントがありますので、詳しくは &lt;a href="https://github.com/k0sukey/TiISRefreshControl"&gt;GitHub の README&lt;/a&gt; をご覧ください。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Alfred と Dash の連携で Titanium API ドキュメントを見よう</title>
    <link rel="alternate" href="/blog/2013/07/18/titanium-in-alfred-and-dash.html"/>
    <id>/blog/2013/07/18/titanium-in-alfred-and-dash.html</id>
    <published>2013-07-17T23:30:00Z</published>
    <updated>2013-07-17T23:30:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;最近教えていただいて、すごく捗るようになったのでご紹介します。
今までは &lt;a href="http://docs.appcelerator.com/titanium/latest/"&gt;Appcelerator の公式サイト&lt;/a&gt;を読むことが多かったのですが、ネット環境がない場所では見ることさえできなくて困っていました。
Sublime Text 2 でオフラインアクセスできるプラグインを作ったりもしましたが、どうにも見辛い…。&lt;/p&gt;

&lt;p&gt;たまたま参加した &lt;a href="http://talknote.me/vol8/event/"&gt;TalkNote × Frontrend&lt;/a&gt; で、JavaScript のドキュメントは &lt;a href="http://kapeli.com/dash"&gt;Dash&lt;/a&gt; で簡単にオフラインで見ることができますよ、しかも &lt;a href="http://www.alfredapp.com/"&gt;Alfred&lt;/a&gt; と連携すると捗りますよとお聞きしました。
普段から Titanium で JavaScript を書いていますので、これは良いことを聞いたと早速設定していたら… Titanium もあったー！と、いうことなのです。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/2013-07-18/dash-hud.png" alt="dash-hud" /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;まずは Alfred と Dash をインストールしましょう。これがないと始まりません。
Dash は有償ですが、たまに出てくる広告付きで無償のまま利用できます&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dash を起動して、Downloads の中から Appcelerator Titanium x.x.x をダウンロードします。
この状態で、すでに Dash 単体で Titanium の API ドキュメントが閲覧可能です
（Alloy な方はついでに BackboneJS と UnderscoreJS もダウンロードしておくと更に捗りますね）。
Automatically download and install updates にチェックをしておくと、ドキュメントがバージョンアップした時勝手に更新してくれて便利です
&lt;img src="/images/blog/2013-07-18/dash-download.png" alt="dash-download" /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Alfred を起動して、Preferences から Fetures → Web Search を選択し、右下にある Add Custom Search をクリックします。
Search URL は画像の通り入力してください。
Title は他のものとあわせてあります。
Keyword はお好みのもので。
ぼくの場合はいつも無意識でタイプする、おなじみの「ti」ですね
&lt;img src="/images/blog/2013-07-18/alfred-setting.png" alt="alfred-setting" /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;以上で完了です。
おもむろにホットキーで Alfred を呼び出し、「ti window」と入力してエンターを叩いてください。
冒頭のスナップショットのように、Dash が表示されましたか？
ダメだった方は 3. の設定を見なおしてみてください
&lt;img src="/images/blog/2013-07-18/alfred-dash.png" alt="alfred-dash" /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;余談ですが、ぼくは Dash の表示を HUD モードにしています。
コードを書きながら、調べたい時に Dash でドキュメントを表示→エディタに戻る→きれいサッパリ Dash がいなくなっている。
この、コーディングをじゃまされない感が本当に快適で、そろそろ Dash にお金を支払おうと思っているところでした
（HUD モードは、Dash の General → Window style から変更することができます）&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Titan になりました</title>
    <link rel="alternate" href="/blog/2013/07/11/titan.html"/>
    <id>/blog/2013/07/11/titan.html</id>
    <published>2013-07-11T07:49:00Z</published>
    <updated>2013-07-11T07:49:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;みなさまこんにちは。
本日は特別なご挨拶をさせていただきます。
この度、Titanium Titans の一員に加えさせてもらえることになりました（&lt;a href="http://developer.appcelerator.com/devlink/profile/1233606"&gt;DevLink のプロフィールページ&lt;/a&gt;をご覧ください）。&lt;/p&gt;

&lt;p&gt;思い起こせば私が Titanium Mobile と出会ってからもうすぐ、2 年と半年を迎えようとしております。
飽きっぽい性格の私がここまで一つの技術を追い続けてこられたのも、Titanium Mobile 自体が面白いこともさることながら、日本の Titanium コミュニティが最高だということです。&lt;/p&gt;

&lt;p&gt;Titan の名に恥じぬよう、微力ながら引き続き Titanium コミュニティへ貢献して参りますので、今後ともよろしくお願いいたします！&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>iOS のプリセットサウンドを鳴らそう</title>
    <link rel="alternate" href="/blog/2013/06/24/ios.html"/>
    <id>/blog/2013/06/24/ios.html</id>
    <published>2013-06-24T05:01:00Z</published>
    <updated>2013-06-24T05:01:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="/blog/2013/06/23/ticameraview.html"&gt;TiCameraView&lt;/a&gt; の副産物で iOS のプリセットサウンドを鳴らすモジュールを作りました。
そもそも Titanium Mobile で API が用意されていると思ったのですがありませんでした。
このモジュールのソースコードは GitHub にありますのでご自由にお使いください。
&lt;a href="https://github.com/k0sukey/TiSystemSound"&gt;k0sukey/TiSystemSound&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="section"&gt;使い方&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/k0sukey/TiSystemSound/blob/master/example/app.js"&gt;example/app.js&lt;/a&gt; をビルドすると、このモジュールで鳴らすことのできるすべてのサウンドを Ti.UI.TableView で表示＆確認できます。
モジュールを require したら &lt;code&gt;play()&lt;/code&gt; するだけです。
簡単ですね。
&lt;small class="muted"&gt;typo があるかもしれませんので、発見したらぜひご連絡ください。&lt;/small&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var TiSystemSound = require('be.k0suke.tisystemsound');
TiSystemSound.play(TiSystemSound.NEW_MAIL);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="section-1"&gt;プロパティとメソッド&lt;/h3&gt;

&lt;h3 id="section-2"&gt;プロパティ&lt;/h3&gt;
&lt;p&gt;ありません。&lt;/p&gt;

&lt;h3 id="section-3"&gt;メソッド&lt;/h3&gt;

&lt;h4 id="play"&gt;play&lt;/h4&gt;
&lt;p&gt;プリセットサウンドを再生します。
TiSystemSound.&lt;code&gt;NEW_MAIL&lt;/code&gt; / &lt;code&gt;MAIL_SENT&lt;/code&gt; / &lt;code&gt;VOICEMAIL&lt;/code&gt; / &lt;code&gt;RECEIVED_MESSAGE&lt;/code&gt; / &lt;code&gt;SENT_MESSAGE&lt;/code&gt; / &lt;code&gt;ALARM&lt;/code&gt; / &lt;code&gt;LOW_POWER&lt;/code&gt; / &lt;code&gt;SMS_RECEIVED1&lt;/code&gt; / &lt;code&gt;SMS_RECEIVED2&lt;/code&gt; / &lt;code&gt;SMS_RECEIVED3&lt;/code&gt; / &lt;code&gt;SMS_RECEIVED4&lt;/code&gt; / &lt;code&gt;SMS_RECEIVED5&lt;/code&gt; / &lt;code&gt;SMS_RECEIVED6&lt;/code&gt; / &lt;code&gt;TWEET_SENT&lt;/code&gt; / &lt;code&gt;ANTICIPATE&lt;/code&gt; / &lt;code&gt;BLOOM&lt;/code&gt; / &lt;code&gt;CALYPSO&lt;/code&gt; / &lt;code&gt;CHOO_CHOO&lt;/code&gt; / &lt;code&gt;DESCENT&lt;/code&gt; / &lt;code&gt;FANFARE&lt;/code&gt; / &lt;code&gt;LADDER&lt;/code&gt; / &lt;code&gt;MINUET&lt;/code&gt; / &lt;code&gt;NEWS_FLASH&lt;/code&gt; / &lt;code&gt;NOIR&lt;/code&gt; / &lt;code&gt;SHERWOOD_FOREST&lt;/code&gt; / &lt;code&gt;SPELL&lt;/code&gt; / &lt;code&gt;SUSPENSE&lt;/code&gt; / &lt;code&gt;TELEGRAPH&lt;/code&gt; / &lt;code&gt;TIPTOES&lt;/code&gt; / &lt;code&gt;TYPEWRITERS&lt;/code&gt; / &lt;code&gt;UPDATE&lt;/code&gt; / &lt;code&gt;USSD&lt;/code&gt; / &lt;code&gt;SIMTOOLKITCALLDROPPED&lt;/code&gt; / &lt;code&gt;SIMTOOLKITGENERATEBEEP&lt;/code&gt; / &lt;code&gt;SIMTOOLKITNEGATIVEACK&lt;/code&gt; / &lt;code&gt;SIMTOOLKITPOSITIVEACK&lt;/code&gt; / &lt;code&gt;SIMTOOLKITSMS&lt;/code&gt; / &lt;code&gt;TINK&lt;/code&gt; / &lt;code&gt;CT_BUSY&lt;/code&gt; / &lt;code&gt;CT_CONGESTION&lt;/code&gt; / &lt;code&gt;CT_PATH_ACK&lt;/code&gt; / &lt;code&gt;CT_ERROR&lt;/code&gt; / &lt;code&gt;CT_CALL_WAITING&lt;/code&gt; / &lt;code&gt;CT_KEYTONE2&lt;/code&gt; / &lt;code&gt;LOCK&lt;/code&gt; / &lt;code&gt;UNLOCK&lt;/code&gt; / &lt;code&gt;TOCK&lt;/code&gt; / &lt;code&gt;BEEP_BEEP&lt;/code&gt; / &lt;code&gt;RINGER_CHANGED&lt;/code&gt; / &lt;code&gt;PHOTO_SHUTTER&lt;/code&gt; / &lt;code&gt;SHAKE&lt;/code&gt; / &lt;code&gt;JBL_BEGIN&lt;/code&gt; / &lt;code&gt;JBL_CONFIRM&lt;/code&gt; / &lt;code&gt;JBL_CANCEL&lt;/code&gt; / &lt;code&gt;BEGIN_RECORD&lt;/code&gt; / &lt;code&gt;END_RECORD&lt;/code&gt; / &lt;code&gt;JBL_AMBIGUOUS&lt;/code&gt; / &lt;code&gt;JBL_NO_MATCH&lt;/code&gt; / &lt;code&gt;BEGIN_VIDEO_RECORD&lt;/code&gt; / &lt;code&gt;END_VIDEO_RECORD&lt;/code&gt; / &lt;code&gt;VC_INVITATION_ACCEPTED&lt;/code&gt; / &lt;code&gt;VC_RINGING&lt;/code&gt; / &lt;code&gt;VC_ENDED&lt;/code&gt; / &lt;code&gt;DTMF_0&lt;/code&gt; / &lt;code&gt;DTMF_1&lt;/code&gt; / &lt;code&gt;DTMF_2&lt;/code&gt; / &lt;code&gt;DTMF_3&lt;/code&gt; / &lt;code&gt;DTMF_4&lt;/code&gt; / &lt;code&gt;DTMF_5&lt;/code&gt; / &lt;code&gt;DTMF_6&lt;/code&gt; / &lt;code&gt;DTMF_7&lt;/code&gt; / &lt;code&gt;DTMF_8&lt;/code&gt; / &lt;code&gt;DTMF_9&lt;/code&gt; / &lt;code&gt;DTMF_STAR&lt;/code&gt; / &lt;code&gt;DTMF_POUND&lt;/code&gt; / &lt;code&gt;LONG_LOW_SHORT_HIGH&lt;/code&gt; / &lt;code&gt;SHORT_DOUBLE_HIGH&lt;/code&gt; / &lt;code&gt;SHORT_LOG_HIGH&lt;/code&gt; / &lt;code&gt;SHORT_DOUBLE_LOW&lt;/code&gt; / &lt;code&gt;MIDDLE_9_SHORT_DOUBLE&lt;/code&gt; から選択してください。&lt;/p&gt;

&lt;h3 id="section-4"&gt;参考にさせていただいたサイト&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://iphonedevwiki.net/index.php/AudioServices"&gt;AudioServices - iPhone Development Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>TiCameraView でカメラをアプリに埋め込もう</title>
    <link rel="alternate" href="/blog/2013/06/23/ticameraview.html"/>
    <id>/blog/2013/06/23/ticameraview.html</id>
    <published>2013-06-23T12:17:00Z</published>
    <updated>2013-06-23T12:17:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Titanium Mobile にデフォルトで用意されている Ti.Media.showCamera とはひと味ちがう TiCameraView モジュールを作ってみました。
このモジュールのソースコードは GitHub にありますのでご自由にお使いください。
&lt;a href="https://github.com/k0sukey/TiCameraView"&gt;k0sukey/TiCameraView&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TiCameraView はカメラからの画像をリアルタイムに Ti.UI.ImageView へ流し込むモジュールです。
Ti.Media.showCamera では API をコールするとカメラ専用のピッカーが表示されてしまいますが、TiCameraView は通常のウィンドウへ（もちろんビューにも）直に貼り付けることができます。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/TiCameraView.png" alt="TiCameraView" /&gt;&lt;/p&gt;

&lt;h3 id="section"&gt;機能&lt;/h3&gt;
&lt;p&gt;Ti.Media.showCamera とほとんど同じことができます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;写真撮影&lt;/li&gt;
  &lt;li&gt;動画撮影&lt;/li&gt;
  &lt;li&gt;カメラの切り替え&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;将来的に追加したい機能は以下の通りです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;動画撮影時に音声も&lt;/li&gt;
  &lt;li&gt;オーバレイしている Ti.UI.Label や Ti.UI.ImageView の合成（現状 add することはできますが、撮影された写真や動画に合成することはできません）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="section-1"&gt;使い方&lt;/h3&gt;
&lt;p&gt;詳しくは GitHub のレポジトリにある &lt;a href="https://github.com/k0sukey/TiCameraView/blob/master/example/app.js"&gt;example/app.js&lt;/a&gt; をご覧ください。
できることはひと通り網羅してあります。&lt;/p&gt;

&lt;h4 id="cameraview-"&gt;CameraView の作り方&lt;/h4&gt;
&lt;p&gt;Titanium Mobile の UI パーツと同じように、モジュールを reauire したら &lt;code&gt;createView()&lt;/code&gt; すれば OK です。
簡単ですね。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var win = Ti.UI.createWindow();

var TiCamera = require('be.k0suke.ticamera');
var cameraView = TiCamera.createView({
	width: 240,
	height: 320,
	backgroundColor: '#000',
	videoQuality: TiCamera.QUALITY_MEDIUM,
	cameraPosition: TiCamera.hasFrontCamera() ? TiCamera.CAMERA_FRONT : TiCamera.CAMERA_BACK,
	frameDuration: 16
});
win.add(cameraView);

win.open();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;videoQuality&lt;/code&gt; や &lt;code&gt;cameraPosition&lt;/code&gt;、&lt;code&gt;frameDuration&lt;/code&gt; が TiCameraView 用の特別なプロパティになります。
&lt;code&gt;videoQuality&lt;/code&gt; は Ti.Media.showCamera のプロパティと同等のもの、&lt;code&gt;cameraPosition&lt;/code&gt; はフロント / バックカメラの初期値になります。
&lt;code&gt;frameDuration&lt;/code&gt; は fps ですね。
値を小さくするとカクカクに、大きくすると滑らかになりますが、16 〜 30 程度を目安に調整してください。&lt;/p&gt;

&lt;h4 id="section-2"&gt;写真の撮影&lt;/h4&gt;
&lt;p&gt;Ti.Media.showCamera と同じように、&lt;code&gt;success&lt;/code&gt; / &lt;code&gt;error&lt;/code&gt; コールバックを指定しながら撮影することができます。
一点、異なる点は &lt;code&gt;shutterSound&lt;/code&gt; ですね。
シャッター音のオン / オフを指定することができます。
オフにすると無音カメラにできてしまいますが、ご利用はご自身の責任でお願いします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cameraView.takePicture({
	saveToPhotoGallery: true,	// default false
	shutterSound: false,		// default true
	success: function(e){
		// e.media(TiBlob), like Ti.Media.showCamera
	},
	error: function(e){
	}
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;シャッター音をオフにしながら setInterval で連続撮影してみたりすると、QR コードを読み取るカメラができそうですね。
ただ、setInterval しながら &lt;code&gt;saveToPhotoGallery&lt;/code&gt; を true にすると、カメラロールが大惨事になることがありますのでご注意ください。
&lt;small class="muted"&gt;もしかしたら定期的に写真を取得できるイベントリスナを作るかもしれません。
そちらのほうが現実的ですよね。&lt;/small&gt;&lt;/p&gt;

&lt;h4 id="section-3"&gt;動画の撮影&lt;/h4&gt;
&lt;p&gt;こちらも Ti.Media.showCamera と同じように、&lt;code&gt;success&lt;/code&gt; / &lt;code&gt;error&lt;/code&gt; コールバックを指定しながら撮影することができます。
&lt;code&gt;recordingSound&lt;/code&gt; で撮影音のオン / オフができます。
こちらも無音カメラにできてしまいますので、ご利用はご自身の責任でお願いします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cameraView.startRecording({
	recordingSound: false		// default true
});

cameraView.stopRecording({
	saveToPhotoGallery: true,	// default false
	recordingSound: false,		// default true
	success: function(e){
		// e.media(TiBlob), like Ti.Media.showCamera
	},
	error: function(e){
	}
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;startRecording()&lt;/code&gt; メソッドで撮影を開始して、&lt;code&gt;stopRecording()&lt;/code&gt; で完了します。
もちろん &lt;code&gt;startRecording()&lt;/code&gt; の前に &lt;code&gt;stopRecording()&lt;/code&gt; はできません。
example/app.js では、撮影後に Ti.Media.videoPlayer で撮影した動画を再生していますので参考にしてみてください。&lt;/p&gt;

&lt;h3 id="section-4"&gt;プロパティとメソッド&lt;/h3&gt;

&lt;h3 id="section-5"&gt;プロパティ&lt;/h3&gt;

&lt;h4 id="videoquality"&gt;videoQuality&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;createView()&lt;/code&gt; する際に指定してください。
TiCamera.&lt;code&gt;QUALITY_PHOTO&lt;/code&gt; / &lt;code&gt;QUALITY_HIGH&lt;/code&gt; / &lt;code&gt;QUALITY_MEDIUM&lt;/code&gt; / &lt;code&gt;QUALITY_LOW&lt;/code&gt; / &lt;code&gt;QUALITY_640x480&lt;/code&gt; / &lt;code&gt;QUALITY_1280x720&lt;/code&gt; から選択してください。&lt;/p&gt;

&lt;h4 id="cameraposition"&gt;cameraPosition&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;createView()&lt;/code&gt; する際に指定してください。
TiCamera.&lt;code&gt;CAMERA_FRONT&lt;/code&gt; / &lt;code&gt;CAMERA_BACK&lt;/code&gt; のどちらかを選択してください。
フロント / バックのカメラが端末でサポートされているかは、TiCamera.&lt;code&gt;hasFrontCamera()&lt;/code&gt; / &lt;code&gt;hasBackCamera()&lt;/code&gt; メソッドで調べることができます。&lt;/p&gt;

&lt;h4 id="frameduration"&gt;frameDuration&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;createView()&lt;/code&gt; する際に指定してください。
16 〜 30 程度を目安に fps を指定します。&lt;/p&gt;

&lt;h3 id="section-6"&gt;メソッド&lt;/h3&gt;

&lt;h4 id="createview"&gt;createView&lt;/h4&gt;
&lt;p&gt;TiCameraView を作ります。&lt;/p&gt;

&lt;h4 id="hasfrontcamera--hasbackcamera"&gt;hasFrontCamera / hasBackCamera&lt;/h4&gt;
&lt;p&gt;フロント / バックのカメラが端末でサポートされているか調べることができます。&lt;/p&gt;

&lt;h4 id="togglecamera"&gt;toggleCamera&lt;/h4&gt;
&lt;p&gt;フロント / バックのカメラを交互に切り替えることができます。&lt;/p&gt;

&lt;h4 id="takepicture"&gt;takePicture&lt;/h4&gt;
&lt;p&gt;写真を撮影することができます。
このメソッドは &lt;code&gt;createView()&lt;/code&gt; で作った TiCameraView で利用してください。&lt;/p&gt;

&lt;h4 id="startrecording--stoprecording"&gt;startRecording / stopRecording&lt;/h4&gt;
&lt;p&gt;動画を撮影することができます。
cameraView.&lt;code&gt;startRecording()&lt;/code&gt; で撮影を開始し、cameraView.&lt;code&gt;stopRecording()&lt;/code&gt; で完了します。
このメソッドは &lt;code&gt;createView()&lt;/code&gt; で作った TiCameraView で利用してください。&lt;/p&gt;

&lt;h3 id="section-7"&gt;参考にさせていただいたサイト&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://dev.classmethod.jp/smartphone/ios-camera-intro/"&gt;iOSのカメラ機能を使う方法まとめ【13日目】 ｜ Developers.IO&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://blog.azzip-azzip.com/2013/04/avassetwriterinputpixelbufferadaptor_avfoundation/"&gt;AVFoundationでキャプチャした画像をAVAssetWriterInputPixelBufferAdaptorクラスを使って映像生成 ›  blog.azzip-azzip.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
  </entry>
</feed>
